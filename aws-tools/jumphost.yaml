AWSTemplateFormatVersion: '2010-09-09'

Parameters: 

  myVPC:
    Type: String
  mySubnet1:
    #Description: 
    Type: String
  myInstanceType:
    #Description: Instance Type
    Type: String
    Default: 't3.medium'
  KeyPairName:
    ConstraintDescription: Must be an existing EC2 Keypair.
    #Description: x
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: 'dev-key'
  # AMIimageID:
  #   #Description:
  #   Type: String
  #   Default: ami-123
  LatestAmiId:
      Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
      Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs'
  SSHuser:
    Type: String
    NoEcho : true
  SSHpass:
    Type: String
    NoEcho : true
  SSHhost:
    Type: String
    NoEcho : true
  repourl:
    Type: String
    NoEcho : true
  repotoken:
    Type: String
    NoEcho : true

Resources:

  WebServer:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref myInstanceType
      IamInstanceProfile: !Sub "${myInstanceProfile}"
      #    Name:  !Ref myInstanceProfile
      KeyName: !Ref KeyPairName
      SubnetId: !Ref mySubnet1
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      UserData: !Base64 
        'Fn::Sub': |-
          #!/bin/bash -xe

          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServer --configsets batch --region ${AWS::Region}
          # debug with: cat /var/log/cloud-init-output.log
          echo 'export PS1="\[\e[0;2m\]tstr[\[\e[0;2m\]\t\[\e[0;2m\]]\[\e[0;32m\]\W\[\e[0m\]\$\[\e[0m\] "' > /etc/bashrc
          
          amazon-linux-extras install epel -y
          yum-config-manager --enable epel
          yum install -y httpd git sshpass

          # install kubectl
          cd /tmp && curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
          chmod +x kubectl
          mv /tmp/kubectl /usr/local/bin/

          # install eksctl
          # curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          # chmod +x /tmp/eksctl && sudo mv /tmp/eksctl /usr/local/bin/

          # install hey tool
          # curl -o /usr/bin/hey https://hey-release.s3.us-east-2.amazonaws.com/hey_linux_amd64
          # chmod +x /usr/bin/hey 

          # intall fortio
          curl -L https://github.com/fortio/fortio/releases/download/v1.19.0/fortio-linux_x64-1.19.0.tgz \
          | sudo tar -C / -xvzpf -

          service httpd start  
          echo "<html><h1>Hello from JumpHost!</h1></html>" > /var/www/html/test.html

          cd /tmp
          git clone https://test-script:${repotoken}@${repourl}
          date_folder=$(date +"%Y.%m.%d_%H-%M")

          cd /tmp/k8s-vs-ASG/data/cli
          cc="sshpass -p ${SSHpass} scp -o StrictHostKeyChecking=no -r $PWD ${SSHuser}@${SSHhost}:/home/${SSHuser}/$date_folder"
          echo $cc > 3.upload.sh
          chmod +x *.sh
          chmod -R a+rw /tmp/
          # wait for the stack to come up
          sleep 600
          nohup ./1.load-asg.sh &> load.log &
          # fortio server
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-instance"
    Metadata:
      AWS::CloudFormation::Init:
       configSets:
          batch:
            - batch_config
       batch_config:
            packages:
              yum:
                unzip: []
                jq: []
                htop: []
            files: 
              /tmp/test.txt: 
                content: !Sub |
                  just a test
                  file dummy
                mode: "777777"
                owner: "root"
                group: "root"

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access via port 80
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 20
          ToPort: 8080
          CidrIp: 0.0.0.0/0


  myInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub '${AWS::StackName}-ec2-instance-profile'
      Path: /
      Roles: 
       - !Ref myInstanceRole

  myInstanceRole: 
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess
        # - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        

      # Policies:
      #   - PolicyName: !Sub ${AWS::StackName}-InlinePolicy
      #     PolicyDocument:
      #       Version: '2012-10-17'
      #       Statement:
      #         -
      #           Effect: Allow
      #           Action: 
      #             - s3:Get*
      #             - s3:List*
      #           Resource: 
      #            - !Sub 'arn:aws:s3:::mybucket'
      #            - !Sub 'arn:aws:s3:::mybucket/*'