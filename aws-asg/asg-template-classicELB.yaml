AWSTemplateFormatVersion: '2010-09-09'

Parameters: 

  myVPC:
    Type: String
  mySubnet1:
    #Description: 
    Type: String
  mySubnet2:
    #Description: 
    Type: String
  #mySecGroup1:
    #Description: 
    #Type: String
  myInstanceType:
    #Description: Instance Type
    Type: String
    Default: 't3.medium'
  KeyPairName:
    ConstraintDescription: Must be an existing EC2 Keypair.
    #Description: x
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: 'dev-key'
  myAPPport:
    #Description: 
    Type: String
    Default: '3000'
  AMIimageID:
    #Description: 
    Type: String
  testHostSubnet:
    Type: String
    Default: '0.0.0.0/0'
  AppBucket:
    Description:
      The S3 bucket containing app
    Type: String
    Default: test1
  autotest:
    Type: String

Resources:
  myLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData: 
        BlockDeviceMappings: 
          - Ebs:
              VolumeSize: 8
              VolumeType: gp3
              DeleteOnTermination: true
              #Encrypted: true
            DeviceName: /dev/xvdcz
        ImageId: !Ref AMIimageID
        InstanceType: !Ref myInstanceType
        KeyName: !Ref KeyPairName
        Monitoring: 
          Enabled: true
        SecurityGroupIds: 
          #- !Ref mySecGroup1
          - !Ref WebServerSecurityGroup
        IamInstanceProfile:
            Name:  !Ref myInstanceProfile
        UserData: !Base64 
          'Fn::Sub': |-
            #!/bin/bash -xe
            # setup test app
            yum update -y
            yum install htop -y

            app=`cut -d "_" -f 2 <<< ${autotest}`

            if [ "$app" == "apache" ]; then
              yum install -y httpd-2.4.52-1.amzn2.x86_64
              service httpd start 
              echo "<html><body><h1>ASGworks1</h1></body></html>" > /var/www/html/test.html
            fi

            if [ "$app" == "taewa" ]; then
              cd /tmp/
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
              nvm install 16.13.1

              curl -L -o app.zip https://github.com/taro-ball/GemCity/raw/master/other/smplc3393f8.zip
              unzip app.zip
              node simpleserver.js
            fi

            # curl -o /tmp/node-v16.13.1-linux-x64.tar.xz https://nodejs.org/dist/v16.13.1/node-v16.13.1-linux-x64.tar.xz
            # mkdir -p /usr/local/lib/nodejs
            # tar -xJvf /tmp/node-v16.13.1-linux-x64.tar.xz -C /usr/local/lib/nodejs
            # echo 'export PATH=/usr/local/lib/nodejs/node-v16.13.1-linux-x64/bin:$PATH' > /etc/profile.d/node.sh

            # aws s3 cp s3://${AppBucket}/app.zip .
            # curl -L -o app.zip https://github.com/taro-ball/GemCity/raw/master/other/appd9f52db.zip 
            # unzip app.zip
            # cd app



            # PORT=3000 /usr/local/lib/nodejs/node-v16.13.1-linux-x64/bin/node server.js
            # PORT=3000 node server.js
            
            #npm start
            

  myASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LoadBalancerNames:
        - !Ref myClassicLoadBalancer
      AutoScalingGroupName: !Sub "${AWS::StackName}-myASG"
      MinSize: "1"
      MaxSize: "4"
      DesiredCapacity: "1"
      HealthCheckGracePeriod: 300
      LaunchTemplate:
        LaunchTemplateId: !Ref myLaunchTemplate
        Version: !GetAtt myLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref mySubnet1
        - !Ref mySubnet2
      MetricsCollection: 
        - Granularity: "1Minute"
      Tags:
        - Key: Purpose
          Value: WebServerGroup
          PropagateAtLaunch: "false"
        - Key: Name
          Value: !Sub "${AWS::StackName}-instance"
          PropagateAtLaunch: "true"

  AppServerSP:
    # scale up when the average CPU usage of the group reaches 75% 
    Type: 'AWS::AutoScaling::ScalingPolicy' 
    Properties:
        AutoScalingGroupName: !Ref myASG
        EstimatedInstanceWarmup: 60
        PolicyType: TargetTrackingScaling
        TargetTrackingConfiguration:
            PredefinedMetricSpecification:
                PredefinedMetricType: ASGAverageCPUUtilization 
            TargetValue: 35

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access via port 80
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: !Ref myAPPport
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 80
          ToPort: !Ref myAPPport
          CidrIp: !Ref testHostSubnet

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load Balancer Security Group
      VpcId: !Ref myVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: !Ref myAPPport
        CidrIp: !Ref testHostSubnet
        #SourceSecurityGroupId: !Ref ProxySecurityGroup 

  myClassicLoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      LoadBalancerName: !Sub '${AWS::StackName}-lb'
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref mySubnet1
        - !Ref mySubnet2
      Scheme: internet-facing
      Listeners:
        - LoadBalancerPort: 80
          InstancePort: 80
          Protocol: TCP
        - LoadBalancerPort: 3000
          InstancePort: 3000
          Protocol: TCP
      HealthCheck:
        Target:
          Fn::Join:
          - ''
          - - 'HTTP:'
            - '3000'
            - "/"
        HealthyThreshold: '2'
        UnhealthyThreshold: '6'
        Interval: '10'
        Timeout: '5'
  myInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub '${AWS::StackName}-ec2-instance-profile'
      Path: /
      Roles: 
       - !Ref myInstanceRole

  myInstanceRole: 
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMDirectoryServiceAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore 
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-InlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: 
                  - s3:Get*
                  - s3:List*
                Resource: 
                 - !Sub 'arn:aws:s3:::${AppBucket}'
                 - !Sub 'arn:aws:s3:::${AppBucket}/*'